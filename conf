./main.cpp:CConf conf;
./main.cpp:	if(load_config("simulation.conf") < 0)
./main.cpp:	int listenWeb = create_connection_to_web(conf.webPort);
Binary file ./.result.swp matches
./simulation.h:int load_config(const std::string&);
Binary file ./root@211.150.71.183 matches
./rapidxml/manual.html: Entire parser is contained in a single header file, so no building or linking is neccesary. To use it you just need to copy <code>rapidxml.hpp</code> file to a convenient place (such as your project directory), and include it where needed. You may also want to use printing functions contained in header <code>rapidxml_print.hpp</code>.</para><sect2><h3 id="namespacerapidxml_1dependencies_and_compatibility">1.1 Dependencies And Compatibility</h3><para>RapidXml has <i>no dependencies</i> other than a very small subset of standard C++ library (<code>&lt;cassert&gt;</code>, <code>&lt;cstdlib&gt;</code>, <code>&lt;new&gt;</code> and <code>&lt;exception&gt;</code>, unless exceptions are disabled). It should compile on any reasonably conformant compiler, and was tested on Visual C++ 2003, Visual C++ 2005, Visual C++ 2008, gcc 3, gcc 4, and Comeau 4.3.3. Care was taken that no warnings are produced on these compilers, even with highest warning levels enabled.</para></sect2><sect2><h3 id="namespacerapidxml_1character_types_and_encodings">1.2 Character Types And Encodings</h3><para>RapidXml is character type agnostic, and can work both with narrow and wide characters. Current version does not fully support UTF-16 or UTF-32, so use of wide characters is somewhat incapacitated. However, it should succesfully parse <code>wchar_t</code> strings containing UTF-16 or UTF-32 if endianness of the data matches that of the machine. UTF-8 is fully supported, including all numeric character references, which are expanded into appropriate UTF-8 byte sequences (unless you enable parse_no_utf8 flag). <br/><br/>
./rapidxml/manual.html: Note that RapidXml performs no decoding - strings returned by name() and value() functions will contain text encoded using the same encoding as source file. Rapidxml understands and expands the following character references: <code>&amp;apos; &amp;amp; &amp;quot; &amp;lt; &amp;gt; &amp;#...;</code> Other character references are not expanded.</para></sect2><sect2><h3 id="namespacerapidxml_1error_handling">1.3 Error Handling</h3><para>By default, RapidXml uses C++ exceptions to report errors. If this behaviour is undesirable, RAPIDXML_NO_EXCEPTIONS can be defined to suppress exception code. See <a href="#classrapidxml_1_1parse__error" kindref="compound">parse_error</a> class and <a href="#namespacerapidxml_ff5d67f74437199d316d2b2660653ae1_1ff5d67f74437199d316d2b2660653ae1" kindref="member">parse_error_handler()</a> function for more information.</para></sect2><sect2><h3 id="namespacerapidxml_1memory_allocation">1.4 Memory Allocation</h3><para>RapidXml uses a special memory pool object to allocate nodes and attributes, because direct allocation using <code>new</code> operator would be far too slow. Underlying memory allocations performed by the pool can be customized by use of <a href="#classrapidxml_1_1memory__pool_c0a55a6ef0837dca67572e357100d78a_1c0a55a6ef0837dca67572e357100d78a" kindref="member">memory_pool::set_allocator()</a> function. See class <a href="#classrapidxml_1_1memory__pool" kindref="compound">memory_pool</a> for more information.</para></sect2><sect2><h3 id="namespacerapidxml_1w3c_compliance">1.5 W3C Compliance</h3><para>RapidXml is not a W3C compliant parser, primarily because it ignores DOCTYPE declarations. There is a number of other, minor incompatibilities as well. Still, it can successfully parse and produce complete trees of all valid XML files in W3C conformance suite (over 1000 files specially designed to find flaws in XML processors). In destructive mode it performs whitespace normalization and character entity substitution for a small set of built-in entities.</para></sect2><sect2><h3 id="namespacerapidxml_1api_design">1.6 API Design</h3><para>RapidXml API is minimalistic, to reduce code size as much as possible, and facilitate use in embedded environments. Additional convenience functions are provided in separate headers: <code>rapidxml_utils.hpp</code> and <code><a href="#rapidxml__print_8hpp" kindref="compound">rapidxml_print.hpp</a></code>. Contents of these headers is not an essential part of the library, and is currently not documented (otherwise than with comments in code).</para></sect2><sect2><h3 id="namespacerapidxml_1reliability">1.7 Reliability</h3><para>RapidXml is very robust and comes with a large harness of unit tests. Special care has been taken to ensure stability of the parser no matter what source text is thrown at it. One of the unit tests produces 100,000 randomly corrupted variants of XML document, which (when uncorrupted) contains all constructs recognized by RapidXml. RapidXml passes this test when it correctly recognizes that errors have been introduced, and does not crash or loop indefinitely. <br/><br/>
./simulation.cpp:extern CConf conf;
./simulation.cpp:	/*if(conf==NULL)
./simulation.cpp:		simu_log->ERROR("当试图create_agents时conf实例还没有加载成功");
./simulation.cpp:	for(int i=0; i < conf.agentNum; i++)
./simulation.cpp:		agent->m_initial_IP = conf.ctiIP;
./simulation.cpp:		agent->m_initial_Port = conf.ctiPort;
./simulation.cpp:		snprintf(agent->m_agentID, sizeof(agent->m_agentID), "%s", add_int_to_string(conf.agentID, i).c_str());
./simulation.cpp:		//agent->m_agentID = add_int_to_string(conf.agentID, i);
./simulation.cpp:		snprintf(agent->m_deviceID, sizeof(agent->m_deviceID), "%s", add_int_to_string(conf.deviceID, i).c_str());
./simulation.cpp:		agent->m_ready = conf.ready;
./simulation.cpp:		snprintf(agent->m_passwd, sizeof(agent->m_passwd), "%s", conf.passwd.c_str());
./simulation.cpp:		snprintf(agent->m_vccID, sizeof(agent->m_vccID), "%s", conf.vccID.c_str());
./simulation.cpp:		snprintf(agent->m_taskID, sizeof(agent->m_taskID), "%s", conf.taskID.c_str());
./simulation.cpp:int load_config(const string& confFile)
./simulation.cpp:	int fs = open(confFile.c_str(),O_RDONLY);
./simulation.cpp:		simu_log->ERROR("打开配置文件 %s 出错,错误原因: %s", confFile.c_str(), strerror(errno));
./simulation.cpp:	char config[1000];
./simulation.cpp:	if(read(fs,config,sizeof(config)) < 0)
./simulation.cpp:		doc.parse<0>(config);
./simulation.cpp:	conf.webPort = atoi(webPort->value());
./simulation.cpp:	conf.ctiIP = string(ctiIP->value());
./simulation.cpp:	conf.ctiPort = atoi(ctiPort->value());
./simulation.cpp:	conf.vccID = string(vccID->value());
./simulation.cpp:	conf.agentNum = atoi(agentNum->value());
./simulation.cpp:	conf.agentID = string(agentID->value());
./simulation.cpp:	conf.ready = atoi(ready->value());
./simulation.cpp:	conf.passwd = string(passwd->value());
./simulation.cpp:	conf.deviceID = string(deviceID->value());
./simulation.cpp:	conf.taskID = string(taskID->value());
./simulation.cpp:	string report_message = string(conf.agentNum);
./result:  0.00      0.98     0.00      668     0.00     0.00  load_config(std::string const&)
./simulation.conf:<config>
./simulation.conf:</config>
Binary file ./CIN-DCP-CTI与座席间接口协议(ACP).doc matches
Binary file ./simulation matches
./.git/hooks/update.sample:allowunannotated=$(git config --bool hooks.allowunannotated)
./.git/hooks/update.sample:allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
./.git/hooks/update.sample:denycreatebranch=$(git config --bool hooks.denycreatebranch)
./.git/hooks/update.sample:allowdeletetag=$(git config --bool hooks.allowdeletetag)
./.git/hooks/update.sample:allowmodifytag=$(git config --bool hooks.allowmodifytag)
./.git/hooks/pre-rebase.sample:to be "next", but it is trivial to make it configurable via
./.git/hooks/pre-rebase.sample:$GIT_DIR/config mechanism.
./.git/hooks/pre-commit.sample:allownonascii=$(git config hooks.allownonascii)
./.git/hooks/pre-commit.sample:	echo "  git config hooks.allownonascii true"
Binary file ./.git/index matches
